"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&$2^@k(sfxh%^_*9x)%)g3dv$b&gbko!1t_b($cz92gl3f@zw5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # installed Dependencies
    'rest_framework',
    'rest_framework.authtoken',
    # installed Apps
    'core',
    'user',
    'recipe',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    # Setting PostgreSQL database as a default database
    'default': {
        # Database Engine => PostgreSQL engine
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST'),
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASS'),
        # the benefit of this is that we can easily change our config. when we run our app on different servers
        # by simply changing them in the environment variables and we don't have to make any changes to our source code to modify:
        # HostName, Name, UserName, Password.
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# what we're gonna do is we're gonna configure the "static" URL and the "media" URL, The "static" roote and the "media" roote.
# what we're setting here is that the static files will be served from "/static/" part of
# our web server so if we go to our server(127.0.0.1:8000/static),
# so anything on "/static/" will map to our static dirs and
# anything in (127.0.0.1:8000/media) will map to our media files.
# that way when we upload media files, we have an accessible URL,
# so that we can access them through our web server.
STATIC_URL = '/static/'
MEDIA_URL = '/media/'

# it simply tells Django where to store all the media files.
# we want all of the media files to be stored in "/vol/web/media" dir
# that we create as part of our build process in our docker container
MEDIA_ROOT = '/vol/web/media'

# it is where all the static files will be dumped when the project is built.
# So Django actually comes with a command called "collectstatic" files
# and it collects all the static files from any dependency that we have.
# and it combines them all and stores them in the "STATIC_ROOT",
# so we can run this once starting our project and it will pull all of the CSS and JS that
# are required for the Django rest_framework browsable API and for the Django Admin and
# it will store them in this '/vol/web/static' dir.
# that means when we're serving our project in production, we can access these static files
# and we can view the Django admin just as we can view it in our local machine.
STATIC_ROOT = '/vol/web/static'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'core.User'

